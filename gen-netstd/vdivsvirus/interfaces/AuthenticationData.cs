/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace vdivsvirus.interfaces
{

  /// <summary>
  /// Structs of AuthenticationData
  /// </summary>
  public partial class AuthenticationData : TBase
  {
    private string _userName;
    private string _hashedPwd;

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string HashedPwd
    {
      get
      {
        return _hashedPwd;
      }
      set
      {
        __isset.hashedPwd = true;
        this._hashedPwd = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool userName;
      public bool hashedPwd;
    }

    public AuthenticationData()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                UserName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                HashedPwd = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AuthenticationData");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (UserName != null && __isset.userName)
        {
          field.Name = "userName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (HashedPwd != null && __isset.hashedPwd)
        {
          field.Name = "hashedPwd";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(HashedPwd, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AuthenticationData;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.userName == other.__isset.userName) && ((!__isset.userName) || (System.Object.Equals(UserName, other.UserName))))
        && ((__isset.hashedPwd == other.__isset.hashedPwd) && ((!__isset.hashedPwd) || (System.Object.Equals(HashedPwd, other.HashedPwd))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.userName)
          hashcode = (hashcode * 397) + UserName.GetHashCode();
        if(__isset.hashedPwd)
          hashcode = (hashcode * 397) + HashedPwd.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AuthenticationData(");
      bool __first = true;
      if (UserName != null && __isset.userName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserName: ");
        sb.Append(UserName);
      }
      if (HashedPwd != null && __isset.hashedPwd)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("HashedPwd: ");
        sb.Append(HashedPwd);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
