/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace vdivsvirus.interfaces
{

  /// <summary>
  /// Structs of ResponseDataSet
  /// </summary>
  public partial class UserResponseDataSet : TBase
  {
    private string _userID;
    private long _time;
    private PropabilityDataSet _propabilities;
    private Dictionary<string, DiseaseType> _diseaseTypes;
    private string _message;

    public string UserID
    {
      get
      {
        return _userID;
      }
      set
      {
        __isset.userID = true;
        this._userID = value;
      }
    }

    public long Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public PropabilityDataSet Propabilities
    {
      get
      {
        return _propabilities;
      }
      set
      {
        __isset.propabilities = true;
        this._propabilities = value;
      }
    }

    public Dictionary<string, DiseaseType> DiseaseTypes
    {
      get
      {
        return _diseaseTypes;
      }
      set
      {
        __isset.diseaseTypes = true;
        this._diseaseTypes = value;
      }
    }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool userID;
      public bool time;
      public bool propabilities;
      public bool diseaseTypes;
      public bool message;
    }

    public UserResponseDataSet()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                UserID = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Propabilities = new PropabilityDataSet();
                await Propabilities.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map22 = await iprot.ReadMapBeginAsync(cancellationToken);
                  DiseaseTypes = new Dictionary<string, DiseaseType>(_map22.Count);
                  for(int _i23 = 0; _i23 < _map22.Count; ++_i23)
                  {
                    string _key24;
                    DiseaseType _val25;
                    _key24 = await iprot.ReadStringAsync(cancellationToken);
                    _val25 = new DiseaseType();
                    await _val25.ReadAsync(iprot, cancellationToken);
                    DiseaseTypes[_key24] = _val25;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Message = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UserResponseDataSet");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (UserID != null && __isset.userID)
        {
          field.Name = "userID";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.time)
        {
          field.Name = "time";
          field.Type = TType.I64;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Propabilities != null && __isset.propabilities)
        {
          field.Name = "propabilities";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Propabilities.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DiseaseTypes != null && __isset.diseaseTypes)
        {
          field.Name = "diseaseTypes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, DiseaseTypes.Count), cancellationToken);
            foreach (string _iter26 in DiseaseTypes.Keys)
            {
              await oprot.WriteStringAsync(_iter26, cancellationToken);
              await DiseaseTypes[_iter26].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Message != null && __isset.message)
        {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Message, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as UserResponseDataSet;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.userID == other.__isset.userID) && ((!__isset.userID) || (System.Object.Equals(UserID, other.UserID))))
        && ((__isset.time == other.__isset.time) && ((!__isset.time) || (System.Object.Equals(Time, other.Time))))
        && ((__isset.propabilities == other.__isset.propabilities) && ((!__isset.propabilities) || (System.Object.Equals(Propabilities, other.Propabilities))))
        && ((__isset.diseaseTypes == other.__isset.diseaseTypes) && ((!__isset.diseaseTypes) || (TCollections.Equals(DiseaseTypes, other.DiseaseTypes))))
        && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.userID)
          hashcode = (hashcode * 397) + UserID.GetHashCode();
        if(__isset.time)
          hashcode = (hashcode * 397) + Time.GetHashCode();
        if(__isset.propabilities)
          hashcode = (hashcode * 397) + Propabilities.GetHashCode();
        if(__isset.diseaseTypes)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(DiseaseTypes);
        if(__isset.message)
          hashcode = (hashcode * 397) + Message.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UserResponseDataSet(");
      bool __first = true;
      if (UserID != null && __isset.userID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserID: ");
        sb.Append(UserID);
      }
      if (__isset.time)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Time: ");
        sb.Append(Time);
      }
      if (Propabilities != null && __isset.propabilities)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Propabilities: ");
        sb.Append(Propabilities== null ? "<null>" : Propabilities.ToString());
      }
      if (DiseaseTypes != null && __isset.diseaseTypes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DiseaseTypes: ");
        sb.Append(DiseaseTypes);
      }
      if (Message != null && __isset.message)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Message: ");
        sb.Append(Message);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
