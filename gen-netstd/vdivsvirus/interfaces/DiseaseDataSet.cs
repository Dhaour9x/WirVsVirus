/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace vdivsvirus.interfaces
{

  /// <summary>
  /// Structs of DiseaseDataSet
  /// </summary>
  public partial class DiseaseDataSet : TBase
  {
    private string _userID;
    private string _diseaseID;
    private bool _testResult;
    private AuthenticationData _authenticator;
    private long _time;

    public string UserID
    {
      get
      {
        return _userID;
      }
      set
      {
        __isset.userID = true;
        this._userID = value;
      }
    }

    public string DiseaseID
    {
      get
      {
        return _diseaseID;
      }
      set
      {
        __isset.diseaseID = true;
        this._diseaseID = value;
      }
    }

    public bool TestResult
    {
      get
      {
        return _testResult;
      }
      set
      {
        __isset.testResult = true;
        this._testResult = value;
      }
    }

    public AuthenticationData Authenticator
    {
      get
      {
        return _authenticator;
      }
      set
      {
        __isset.authenticator = true;
        this._authenticator = value;
      }
    }

    public long Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool userID;
      public bool diseaseID;
      public bool testResult;
      public bool authenticator;
      public bool time;
    }

    public DiseaseDataSet()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                UserID = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                DiseaseID = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                TestResult = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Authenticator = new AuthenticationData();
                await Authenticator.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DiseaseDataSet");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (UserID != null && __isset.userID)
        {
          field.Name = "userID";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DiseaseID != null && __isset.diseaseID)
        {
          field.Name = "diseaseID";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DiseaseID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.testResult)
        {
          field.Name = "testResult";
          field.Type = TType.Bool;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(TestResult, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Authenticator != null && __isset.authenticator)
        {
          field.Name = "authenticator";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Authenticator.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.time)
        {
          field.Name = "time";
          field.Type = TType.I64;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as DiseaseDataSet;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.userID == other.__isset.userID) && ((!__isset.userID) || (System.Object.Equals(UserID, other.UserID))))
        && ((__isset.diseaseID == other.__isset.diseaseID) && ((!__isset.diseaseID) || (System.Object.Equals(DiseaseID, other.DiseaseID))))
        && ((__isset.testResult == other.__isset.testResult) && ((!__isset.testResult) || (System.Object.Equals(TestResult, other.TestResult))))
        && ((__isset.authenticator == other.__isset.authenticator) && ((!__isset.authenticator) || (System.Object.Equals(Authenticator, other.Authenticator))))
        && ((__isset.time == other.__isset.time) && ((!__isset.time) || (System.Object.Equals(Time, other.Time))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.userID)
          hashcode = (hashcode * 397) + UserID.GetHashCode();
        if(__isset.diseaseID)
          hashcode = (hashcode * 397) + DiseaseID.GetHashCode();
        if(__isset.testResult)
          hashcode = (hashcode * 397) + TestResult.GetHashCode();
        if(__isset.authenticator)
          hashcode = (hashcode * 397) + Authenticator.GetHashCode();
        if(__isset.time)
          hashcode = (hashcode * 397) + Time.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DiseaseDataSet(");
      bool __first = true;
      if (UserID != null && __isset.userID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserID: ");
        sb.Append(UserID);
      }
      if (DiseaseID != null && __isset.diseaseID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DiseaseID: ");
        sb.Append(DiseaseID);
      }
      if (__isset.testResult)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TestResult: ");
        sb.Append(TestResult);
      }
      if (Authenticator != null && __isset.authenticator)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Authenticator: ");
        sb.Append(Authenticator== null ? "<null>" : Authenticator.ToString());
      }
      if (__isset.time)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Time: ");
        sb.Append(Time);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
