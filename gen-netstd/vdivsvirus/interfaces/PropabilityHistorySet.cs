/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace vdivsvirus.interfaces
{

  /// <summary>
  /// Structs of PropabilityHistorySet [INPUT]
  /// </summary>
  public partial class PropabilityHistorySet : TBase
  {
    private string _userID;
    private List<PropabilityDataSet> _history;

    public string UserID
    {
      get
      {
        return _userID;
      }
      set
      {
        __isset.userID = true;
        this._userID = value;
      }
    }

    public List<PropabilityDataSet> History
    {
      get
      {
        return _history;
      }
      set
      {
        __isset.history = true;
        this._history = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool userID;
      public bool history;
    }

    public PropabilityHistorySet()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                UserID = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list18 = await iprot.ReadListBeginAsync(cancellationToken);
                  History = new List<PropabilityDataSet>(_list18.Count);
                  for(int _i19 = 0; _i19 < _list18.Count; ++_i19)
                  {
                    PropabilityDataSet _elem20;
                    _elem20 = new PropabilityDataSet();
                    await _elem20.ReadAsync(iprot, cancellationToken);
                    History.Add(_elem20);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("PropabilityHistorySet");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (UserID != null && __isset.userID)
        {
          field.Name = "userID";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (History != null && __isset.history)
        {
          field.Name = "history";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, History.Count), cancellationToken);
            foreach (PropabilityDataSet _iter21 in History)
            {
              await _iter21.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as PropabilityHistorySet;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.userID == other.__isset.userID) && ((!__isset.userID) || (System.Object.Equals(UserID, other.UserID))))
        && ((__isset.history == other.__isset.history) && ((!__isset.history) || (TCollections.Equals(History, other.History))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.userID)
          hashcode = (hashcode * 397) + UserID.GetHashCode();
        if(__isset.history)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(History);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("PropabilityHistorySet(");
      bool __first = true;
      if (UserID != null && __isset.userID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserID: ");
        sb.Append(UserID);
      }
      if (History != null && __isset.history)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("History: ");
        sb.Append(History);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
