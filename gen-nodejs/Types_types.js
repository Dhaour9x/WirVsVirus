//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.SymptomeClassifier = {
  'none' : 0,
  'yesno' : 1,
  'scalar' : 2
};
ttypes.SymptomeStrength = {
  'none' : 0,
  'yes' : 1,
  'weak' : 2,
  'middle' : 3,
  'strong' : 4,
  'verystrong' : 5
};
var ServiceResponse = module.exports.ServiceResponse = function(args) {
  this.responseId = 0;
  this.message = null;
  if (args) {
    if (args.responseId !== undefined && args.responseId !== null) {
      this.responseId = args.responseId;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
ServiceResponse.prototype = {};
ServiceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.responseId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceResponse.prototype.write = function(output) {
  output.writeStructBegin('ServiceResponse');
  if (this.responseId !== null && this.responseId !== undefined) {
    output.writeFieldBegin('responseId', Thrift.Type.I32, 1);
    output.writeI32(this.responseId);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymptomeType = module.exports.SymptomeType = function(args) {
  this.id = null;
  this.classifier = null;
  this.name = null;
  this.desc = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.classifier !== undefined && args.classifier !== null) {
      this.classifier = args.classifier;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
SymptomeType.prototype = {};
SymptomeType.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.classifier = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymptomeType.prototype.write = function(output) {
  output.writeStructBegin('SymptomeType');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.classifier !== null && this.classifier !== undefined) {
    output.writeFieldBegin('classifier', Thrift.Type.I32, 2);
    output.writeI32(this.classifier);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 4);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymptomeInputData = module.exports.SymptomeInputData = function(args) {
  this.type = null;
  this.strength = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = new ttypes.SymptomeType(args.type);
    }
    if (args.strength !== undefined && args.strength !== null) {
      this.strength = args.strength;
    }
  }
};
SymptomeInputData.prototype = {};
SymptomeInputData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.SymptomeType();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.strength = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymptomeInputData.prototype.write = function(output) {
  output.writeStructBegin('SymptomeInputData');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1);
    this.type.write(output);
    output.writeFieldEnd();
  }
  if (this.strength !== null && this.strength !== undefined) {
    output.writeFieldBegin('strength', Thrift.Type.I32, 2);
    output.writeI32(this.strength);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GeoData = module.exports.GeoData = function(args) {
  this.latitude = null;
  this.longitude = null;
  this.time = null;
  this.accuracy = null;
  if (args) {
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.accuracy !== undefined && args.accuracy !== null) {
      this.accuracy = args.accuracy;
    }
  }
};
GeoData.prototype = {};
GeoData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.accuracy = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeoData.prototype.write = function(output) {
  output.writeStructBegin('GeoData');
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.accuracy !== null && this.accuracy !== undefined) {
    output.writeFieldBegin('accuracy', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.accuracy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymptomeInputDataSet = module.exports.SymptomeInputDataSet = function(args) {
  this.userID = null;
  this.symptomes = null;
  this.geodata = null;
  this.time = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.symptomes !== undefined && args.symptomes !== null) {
      this.symptomes = Thrift.copyList(args.symptomes, [ttypes.SymptomeInputData]);
    }
    if (args.geodata !== undefined && args.geodata !== null) {
      this.geodata = Thrift.copyList(args.geodata, [ttypes.GeoData]);
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
  }
};
SymptomeInputDataSet.prototype = {};
SymptomeInputDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.symptomes = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.SymptomeInputData();
          elem3.read(input);
          this.symptomes.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.geodata = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = new ttypes.GeoData();
          elem7.read(input);
          this.geodata.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymptomeInputDataSet.prototype.write = function(output) {
  output.writeStructBegin('SymptomeInputDataSet');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.symptomes !== null && this.symptomes !== undefined) {
    output.writeFieldBegin('symptomes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.symptomes.length);
    for (var iter8 in this.symptomes) {
      if (this.symptomes.hasOwnProperty(iter8)) {
        iter8 = this.symptomes[iter8];
        iter8.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.geodata !== null && this.geodata !== undefined) {
    output.writeFieldBegin('geodata', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.geodata.length);
    for (var iter9 in this.geodata) {
      if (this.geodata.hasOwnProperty(iter9)) {
        iter9 = this.geodata[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 4);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthenticationData = module.exports.AuthenticationData = function(args) {
  this.userName = null;
  this.hashedPwd = null;
  if (args) {
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
    if (args.hashedPwd !== undefined && args.hashedPwd !== null) {
      this.hashedPwd = args.hashedPwd;
    }
  }
};
AuthenticationData.prototype = {};
AuthenticationData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hashedPwd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationData.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationData');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.hashedPwd !== null && this.hashedPwd !== undefined) {
    output.writeFieldBegin('hashedPwd', Thrift.Type.STRING, 2);
    output.writeString(this.hashedPwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DiseaseDataSet = module.exports.DiseaseDataSet = function(args) {
  this.userID = null;
  this.diseaseID = null;
  this.testResult = null;
  this.authenticator = null;
  this.time = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.diseaseID !== undefined && args.diseaseID !== null) {
      this.diseaseID = args.diseaseID;
    }
    if (args.testResult !== undefined && args.testResult !== null) {
      this.testResult = args.testResult;
    }
    if (args.authenticator !== undefined && args.authenticator !== null) {
      this.authenticator = new ttypes.AuthenticationData(args.authenticator);
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
  }
};
DiseaseDataSet.prototype = {};
DiseaseDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.diseaseID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.testResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.authenticator = new ttypes.AuthenticationData();
        this.authenticator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiseaseDataSet.prototype.write = function(output) {
  output.writeStructBegin('DiseaseDataSet');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.diseaseID !== null && this.diseaseID !== undefined) {
    output.writeFieldBegin('diseaseID', Thrift.Type.STRING, 2);
    output.writeString(this.diseaseID);
    output.writeFieldEnd();
  }
  if (this.testResult !== null && this.testResult !== undefined) {
    output.writeFieldBegin('testResult', Thrift.Type.BOOL, 3);
    output.writeBool(this.testResult);
    output.writeFieldEnd();
  }
  if (this.authenticator !== null && this.authenticator !== undefined) {
    output.writeFieldBegin('authenticator', Thrift.Type.STRUCT, 4);
    this.authenticator.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 5);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymptomeDataSet = module.exports.SymptomeDataSet = function(args) {
  this.userID = null;
  this.time = null;
  this.symptomes = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.symptomes !== undefined && args.symptomes !== null) {
      this.symptomes = Thrift.copyMap(args.symptomes, [null]);
    }
  }
};
SymptomeDataSet.prototype = {};
SymptomeDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.symptomes = {};
        var _rtmp311 = input.readMapBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var key13 = null;
          var val14 = null;
          key13 = input.readString();
          val14 = input.readI32();
          this.symptomes[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymptomeDataSet.prototype.write = function(output) {
  output.writeStructBegin('SymptomeDataSet');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 2);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.symptomes !== null && this.symptomes !== undefined) {
    output.writeFieldBegin('symptomes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.symptomes));
    for (var kiter15 in this.symptomes) {
      if (this.symptomes.hasOwnProperty(kiter15)) {
        var viter16 = this.symptomes[kiter15];
        output.writeString(kiter15);
        output.writeI32(viter16);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PropabilityDataSet = module.exports.PropabilityDataSet = function(args) {
  this.userID = null;
  this.time = null;
  this.propabilities = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.propabilities !== undefined && args.propabilities !== null) {
      this.propabilities = Thrift.copyMap(args.propabilities, [null]);
    }
  }
};
PropabilityDataSet.prototype = {};
PropabilityDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.propabilities = {};
        var _rtmp318 = input.readMapBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var key20 = null;
          var val21 = null;
          key20 = input.readString();
          val21 = input.readByte();
          this.propabilities[key20] = val21;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropabilityDataSet.prototype.write = function(output) {
  output.writeStructBegin('PropabilityDataSet');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 2);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.propabilities !== null && this.propabilities !== undefined) {
    output.writeFieldBegin('propabilities', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BYTE, Thrift.objectLength(this.propabilities));
    for (var kiter22 in this.propabilities) {
      if (this.propabilities.hasOwnProperty(kiter22)) {
        var viter23 = this.propabilities[kiter22];
        output.writeString(kiter22);
        output.writeByte(viter23);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PropabilityHistorySet = module.exports.PropabilityHistorySet = function(args) {
  this.userID = null;
  this.history = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.history !== undefined && args.history !== null) {
      this.history = Thrift.copyList(args.history, [ttypes.PropabilityDataSet]);
    }
  }
};
PropabilityHistorySet.prototype = {};
PropabilityHistorySet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.history = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = new ttypes.PropabilityDataSet();
          elem27.read(input);
          this.history.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropabilityHistorySet.prototype.write = function(output) {
  output.writeStructBegin('PropabilityHistorySet');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.history !== null && this.history !== undefined) {
    output.writeFieldBegin('history', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.history.length);
    for (var iter28 in this.history) {
      if (this.history.hasOwnProperty(iter28)) {
        iter28 = this.history[iter28];
        iter28.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DiseaseType = module.exports.DiseaseType = function(args) {
  this.id = null;
  this.name = null;
  this.desc = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
DiseaseType.prototype = {};
DiseaseType.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiseaseType.prototype.write = function(output) {
  output.writeStructBegin('DiseaseType');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 3);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserResponseDataSet = module.exports.UserResponseDataSet = function(args) {
  this.userID = null;
  this.time = null;
  this.propabilities = null;
  this.diseaseTypes = null;
  this.message = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.propabilities !== undefined && args.propabilities !== null) {
      this.propabilities = new ttypes.PropabilityDataSet(args.propabilities);
    }
    if (args.diseaseTypes !== undefined && args.diseaseTypes !== null) {
      this.diseaseTypes = Thrift.copyMap(args.diseaseTypes, [ttypes.DiseaseType]);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
UserResponseDataSet.prototype = {};
UserResponseDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.propabilities = new ttypes.PropabilityDataSet();
        this.propabilities.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.diseaseTypes = {};
        var _rtmp330 = input.readMapBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var key32 = null;
          var val33 = null;
          key32 = input.readString();
          val33 = new ttypes.DiseaseType();
          val33.read(input);
          this.diseaseTypes[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserResponseDataSet.prototype.write = function(output) {
  output.writeStructBegin('UserResponseDataSet');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 2);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.propabilities !== null && this.propabilities !== undefined) {
    output.writeFieldBegin('propabilities', Thrift.Type.STRUCT, 3);
    this.propabilities.write(output);
    output.writeFieldEnd();
  }
  if (this.diseaseTypes !== null && this.diseaseTypes !== undefined) {
    output.writeFieldBegin('diseaseTypes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.diseaseTypes));
    for (var kiter34 in this.diseaseTypes) {
      if (this.diseaseTypes.hasOwnProperty(kiter34)) {
        var viter35 = this.diseaseTypes[kiter34];
        output.writeString(kiter34);
        viter35.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserHistoryDataSet = module.exports.UserHistoryDataSet = function(args) {
  this.userID = null;
  this.history = null;
  this.diseaseTypes = null;
  this.message = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.history !== undefined && args.history !== null) {
      this.history = Thrift.copyMap(args.history, [ttypes.PropabilityDataSet]);
    }
    if (args.diseaseTypes !== undefined && args.diseaseTypes !== null) {
      this.diseaseTypes = Thrift.copyMap(args.diseaseTypes, [ttypes.DiseaseType]);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
UserHistoryDataSet.prototype = {};
UserHistoryDataSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.history = {};
        var _rtmp337 = input.readMapBegin();
        var _size36 = _rtmp337.size || 0;
        for (var _i38 = 0; _i38 < _size36; ++_i38) {
          var key39 = null;
          var val40 = null;
          key39 = input.readI64();
          val40 = new ttypes.PropabilityDataSet();
          val40.read(input);
          this.history[key39] = val40;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.diseaseTypes = {};
        var _rtmp342 = input.readMapBegin();
        var _size41 = _rtmp342.size || 0;
        for (var _i43 = 0; _i43 < _size41; ++_i43) {
          var key44 = null;
          var val45 = null;
          key44 = input.readString();
          val45 = new ttypes.DiseaseType();
          val45.read(input);
          this.diseaseTypes[key44] = val45;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserHistoryDataSet.prototype.write = function(output) {
  output.writeStructBegin('UserHistoryDataSet');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.history !== null && this.history !== undefined) {
    output.writeFieldBegin('history', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.history));
    for (var kiter46 in this.history) {
      if (this.history.hasOwnProperty(kiter46)) {
        var viter47 = this.history[kiter46];
        output.writeI64(kiter46);
        viter47.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.diseaseTypes !== null && this.diseaseTypes !== undefined) {
    output.writeFieldBegin('diseaseTypes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.diseaseTypes));
    for (var kiter48 in this.diseaseTypes) {
      if (this.diseaseTypes.hasOwnProperty(kiter48)) {
        var viter49 = this.diseaseTypes[kiter48];
        output.writeString(kiter48);
        viter49.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

