//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var Types_ttypes = require('./Types_types');


var ttypes = require('./RequestDataService_types');
//HELPER FUNCTIONS AND STRUCTURES

var RequestDataSetService_DataSetAvailable_args = function(args) {
};
RequestDataSetService_DataSetAvailable_args.prototype = {};
RequestDataSetService_DataSetAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_DataSetAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_DataSetAvailable_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_DataSetAvailable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RequestDataSetService_DataSetAvailable_result.prototype = {};
RequestDataSetService_DataSetAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_DataSetAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_DataSetAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestDataSet_args = function(args) {
};
RequestDataSetService_RequestDataSet_args.prototype = {};
RequestDataSetService_RequestDataSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestDataSet_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestDataSet_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestDataSet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.SymptomeDataSet(args.success);
    }
  }
};
RequestDataSetService_RequestDataSet_result.prototype = {};
RequestDataSetService_RequestDataSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SymptomeDataSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestDataSet_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestDataSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_SendDataResultSet_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = new Types_ttypes.PropabilityDataSet(args.data);
    }
  }
};
RequestDataSetService_SendDataResultSet_args.prototype = {};
RequestDataSetService_SendDataResultSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new Types_ttypes.PropabilityDataSet();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_SendDataResultSet_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_SendDataResultSet_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_SendDataResultSet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.ServiceResponse(args.success);
    }
  }
};
RequestDataSetService_SendDataResultSet_result.prototype = {};
RequestDataSetService_SendDataResultSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.ServiceResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_SendDataResultSet_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_SendDataResultSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_HistorySetAvailable_args = function(args) {
};
RequestDataSetService_HistorySetAvailable_args.prototype = {};
RequestDataSetService_HistorySetAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_HistorySetAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_HistorySetAvailable_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_HistorySetAvailable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
RequestDataSetService_HistorySetAvailable_result.prototype = {};
RequestDataSetService_HistorySetAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_HistorySetAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_HistorySetAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestHistorySet_args = function(args) {
};
RequestDataSetService_RequestHistorySet_args.prototype = {};
RequestDataSetService_RequestHistorySet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestHistorySet_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestHistorySet_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestHistorySet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.PropabilityHistorySet(args.success);
    }
  }
};
RequestDataSetService_RequestHistorySet_result.prototype = {};
RequestDataSetService_RequestHistorySet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.PropabilityHistorySet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestHistorySet_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestHistorySet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_SendHistoryResultSet_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = new Types_ttypes.PropabilityDataSet(args.data);
    }
  }
};
RequestDataSetService_SendHistoryResultSet_args.prototype = {};
RequestDataSetService_SendHistoryResultSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new Types_ttypes.PropabilityDataSet();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_SendHistoryResultSet_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_SendHistoryResultSet_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_SendHistoryResultSet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.ServiceResponse(args.success);
    }
  }
};
RequestDataSetService_SendHistoryResultSet_result.prototype = {};
RequestDataSetService_SendHistoryResultSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.ServiceResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_SendHistoryResultSet_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_SendHistoryResultSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestDiseasePropability_args = function(args) {
  this.userID = null;
  this.time = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
  }
};
RequestDataSetService_RequestDiseasePropability_args.prototype = {};
RequestDataSetService_RequestDiseasePropability_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestDiseasePropability_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestDiseasePropability_args');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 2);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestDiseasePropability_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.PropabilityDataSet(args.success);
    }
  }
};
RequestDataSetService_RequestDiseasePropability_result.prototype = {};
RequestDataSetService_RequestDiseasePropability_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.PropabilityDataSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestDiseasePropability_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestDiseasePropability_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestDiseasePropabilityHistory_args = function(args) {
  this.userID = null;
  if (args) {
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
  }
};
RequestDataSetService_RequestDiseasePropabilityHistory_args.prototype = {};
RequestDataSetService_RequestDiseasePropabilityHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestDiseasePropabilityHistory_args.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestDiseasePropabilityHistory_args');
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.STRING, 1);
    output.writeString(this.userID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetService_RequestDiseasePropabilityHistory_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.PropabilityHistorySet(args.success);
    }
  }
};
RequestDataSetService_RequestDiseasePropabilityHistory_result.prototype = {};
RequestDataSetService_RequestDiseasePropabilityHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.PropabilityHistorySet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestDataSetService_RequestDiseasePropabilityHistory_result.prototype.write = function(output) {
  output.writeStructBegin('RequestDataSetService_RequestDiseasePropabilityHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestDataSetServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
RequestDataSetServiceClient.prototype = {};
RequestDataSetServiceClient.prototype.seqid = function() { return this._seqid; };
RequestDataSetServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

RequestDataSetServiceClient.prototype.DataSetAvailable = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_DataSetAvailable();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_DataSetAvailable();
  }
};

RequestDataSetServiceClient.prototype.send_DataSetAvailable = function() {
  var output = new this.pClass(this.output);
  var args = new RequestDataSetService_DataSetAvailable_args();
  try {
    output.writeMessageBegin('DataSetAvailable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_DataSetAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_DataSetAvailable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('DataSetAvailable failed: unknown result');
};

RequestDataSetServiceClient.prototype.RequestDataSet = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RequestDataSet();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RequestDataSet();
  }
};

RequestDataSetServiceClient.prototype.send_RequestDataSet = function() {
  var output = new this.pClass(this.output);
  var args = new RequestDataSetService_RequestDataSet_args();
  try {
    output.writeMessageBegin('RequestDataSet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_RequestDataSet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_RequestDataSet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('RequestDataSet failed: unknown result');
};

RequestDataSetServiceClient.prototype.SendDataResultSet = function(data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SendDataResultSet(data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SendDataResultSet(data);
  }
};

RequestDataSetServiceClient.prototype.send_SendDataResultSet = function(data) {
  var output = new this.pClass(this.output);
  var params = {
    data: data
  };
  var args = new RequestDataSetService_SendDataResultSet_args(params);
  try {
    output.writeMessageBegin('SendDataResultSet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_SendDataResultSet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_SendDataResultSet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SendDataResultSet failed: unknown result');
};

RequestDataSetServiceClient.prototype.HistorySetAvailable = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_HistorySetAvailable();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_HistorySetAvailable();
  }
};

RequestDataSetServiceClient.prototype.send_HistorySetAvailable = function() {
  var output = new this.pClass(this.output);
  var args = new RequestDataSetService_HistorySetAvailable_args();
  try {
    output.writeMessageBegin('HistorySetAvailable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_HistorySetAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_HistorySetAvailable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('HistorySetAvailable failed: unknown result');
};

RequestDataSetServiceClient.prototype.RequestHistorySet = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RequestHistorySet();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RequestHistorySet();
  }
};

RequestDataSetServiceClient.prototype.send_RequestHistorySet = function() {
  var output = new this.pClass(this.output);
  var args = new RequestDataSetService_RequestHistorySet_args();
  try {
    output.writeMessageBegin('RequestHistorySet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_RequestHistorySet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_RequestHistorySet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('RequestHistorySet failed: unknown result');
};

RequestDataSetServiceClient.prototype.SendHistoryResultSet = function(data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SendHistoryResultSet(data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SendHistoryResultSet(data);
  }
};

RequestDataSetServiceClient.prototype.send_SendHistoryResultSet = function(data) {
  var output = new this.pClass(this.output);
  var params = {
    data: data
  };
  var args = new RequestDataSetService_SendHistoryResultSet_args(params);
  try {
    output.writeMessageBegin('SendHistoryResultSet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_SendHistoryResultSet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_SendHistoryResultSet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SendHistoryResultSet failed: unknown result');
};

RequestDataSetServiceClient.prototype.RequestDiseasePropability = function(userID, time, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RequestDiseasePropability(userID, time);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RequestDiseasePropability(userID, time);
  }
};

RequestDataSetServiceClient.prototype.send_RequestDiseasePropability = function(userID, time) {
  var output = new this.pClass(this.output);
  var params = {
    userID: userID,
    time: time
  };
  var args = new RequestDataSetService_RequestDiseasePropability_args(params);
  try {
    output.writeMessageBegin('RequestDiseasePropability', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_RequestDiseasePropability = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_RequestDiseasePropability_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('RequestDiseasePropability failed: unknown result');
};

RequestDataSetServiceClient.prototype.RequestDiseasePropabilityHistory = function(userID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RequestDiseasePropabilityHistory(userID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RequestDiseasePropabilityHistory(userID);
  }
};

RequestDataSetServiceClient.prototype.send_RequestDiseasePropabilityHistory = function(userID) {
  var output = new this.pClass(this.output);
  var params = {
    userID: userID
  };
  var args = new RequestDataSetService_RequestDiseasePropabilityHistory_args(params);
  try {
    output.writeMessageBegin('RequestDiseasePropabilityHistory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

RequestDataSetServiceClient.prototype.recv_RequestDiseasePropabilityHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RequestDataSetService_RequestDiseasePropabilityHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('RequestDiseasePropabilityHistory failed: unknown result');
};
var RequestDataSetServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
RequestDataSetServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
RequestDataSetServiceProcessor.prototype.process_DataSetAvailable = function(seqid, input, output) {
  var args = new RequestDataSetService_DataSetAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.DataSetAvailable.length === 0) {
    Q.fcall(this._handler.DataSetAvailable.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RequestDataSetService_DataSetAvailable_result({success: result});
      output.writeMessageBegin("DataSetAvailable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("DataSetAvailable", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.DataSetAvailable(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_DataSetAvailable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("DataSetAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("DataSetAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RequestDataSetServiceProcessor.prototype.process_RequestDataSet = function(seqid, input, output) {
  var args = new RequestDataSetService_RequestDataSet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RequestDataSet.length === 0) {
    Q.fcall(this._handler.RequestDataSet.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RequestDataSetService_RequestDataSet_result({success: result});
      output.writeMessageBegin("RequestDataSet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RequestDataSet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RequestDataSet(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_RequestDataSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RequestDataSet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RequestDataSet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RequestDataSetServiceProcessor.prototype.process_SendDataResultSet = function(seqid, input, output) {
  var args = new RequestDataSetService_SendDataResultSet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SendDataResultSet.length === 1) {
    Q.fcall(this._handler.SendDataResultSet.bind(this._handler),
      args.data
    ).then(function(result) {
      var result_obj = new RequestDataSetService_SendDataResultSet_result({success: result});
      output.writeMessageBegin("SendDataResultSet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SendDataResultSet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SendDataResultSet(args.data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_SendDataResultSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SendDataResultSet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SendDataResultSet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RequestDataSetServiceProcessor.prototype.process_HistorySetAvailable = function(seqid, input, output) {
  var args = new RequestDataSetService_HistorySetAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.HistorySetAvailable.length === 0) {
    Q.fcall(this._handler.HistorySetAvailable.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RequestDataSetService_HistorySetAvailable_result({success: result});
      output.writeMessageBegin("HistorySetAvailable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("HistorySetAvailable", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.HistorySetAvailable(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_HistorySetAvailable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("HistorySetAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("HistorySetAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RequestDataSetServiceProcessor.prototype.process_RequestHistorySet = function(seqid, input, output) {
  var args = new RequestDataSetService_RequestHistorySet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RequestHistorySet.length === 0) {
    Q.fcall(this._handler.RequestHistorySet.bind(this._handler)
    ).then(function(result) {
      var result_obj = new RequestDataSetService_RequestHistorySet_result({success: result});
      output.writeMessageBegin("RequestHistorySet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RequestHistorySet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RequestHistorySet(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_RequestHistorySet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RequestHistorySet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RequestHistorySet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RequestDataSetServiceProcessor.prototype.process_SendHistoryResultSet = function(seqid, input, output) {
  var args = new RequestDataSetService_SendHistoryResultSet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SendHistoryResultSet.length === 1) {
    Q.fcall(this._handler.SendHistoryResultSet.bind(this._handler),
      args.data
    ).then(function(result) {
      var result_obj = new RequestDataSetService_SendHistoryResultSet_result({success: result});
      output.writeMessageBegin("SendHistoryResultSet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SendHistoryResultSet", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SendHistoryResultSet(args.data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_SendHistoryResultSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SendHistoryResultSet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SendHistoryResultSet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RequestDataSetServiceProcessor.prototype.process_RequestDiseasePropability = function(seqid, input, output) {
  var args = new RequestDataSetService_RequestDiseasePropability_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RequestDiseasePropability.length === 2) {
    Q.fcall(this._handler.RequestDiseasePropability.bind(this._handler),
      args.userID,
      args.time
    ).then(function(result) {
      var result_obj = new RequestDataSetService_RequestDiseasePropability_result({success: result});
      output.writeMessageBegin("RequestDiseasePropability", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RequestDiseasePropability", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RequestDiseasePropability(args.userID, args.time, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_RequestDiseasePropability_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RequestDiseasePropability", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RequestDiseasePropability", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
RequestDataSetServiceProcessor.prototype.process_RequestDiseasePropabilityHistory = function(seqid, input, output) {
  var args = new RequestDataSetService_RequestDiseasePropabilityHistory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RequestDiseasePropabilityHistory.length === 1) {
    Q.fcall(this._handler.RequestDiseasePropabilityHistory.bind(this._handler),
      args.userID
    ).then(function(result) {
      var result_obj = new RequestDataSetService_RequestDiseasePropabilityHistory_result({success: result});
      output.writeMessageBegin("RequestDiseasePropabilityHistory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RequestDiseasePropabilityHistory", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RequestDiseasePropabilityHistory(args.userID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new RequestDataSetService_RequestDiseasePropabilityHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RequestDiseasePropabilityHistory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RequestDiseasePropabilityHistory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
