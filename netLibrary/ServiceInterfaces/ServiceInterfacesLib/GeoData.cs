/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace vdivsvirus.interfaces
{

  /// <summary>
  /// GeoData
  /// https://developer.android.com/reference/android/location/Location.html
  /// </summary>
  public partial class GeoData : TBase
  {
    private double _latitude;
    private double _longitude;
    private long _time;
    private double _accuracy;

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public long Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public double Accuracy
    {
      get
      {
        return _accuracy;
      }
      set
      {
        __isset.accuracy = true;
        this._accuracy = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool latitude;
      public bool longitude;
      public bool time;
      public bool accuracy;
    }

    public GeoData()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double)
              {
                Latitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Double)
              {
                Longitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Time = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                Accuracy = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GeoData");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.latitude)
        {
          field.Name = "latitude";
          field.Type = TType.Double;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Latitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.longitude)
        {
          field.Name = "longitude";
          field.Type = TType.Double;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Longitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.time)
        {
          field.Name = "time";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Time, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.accuracy)
        {
          field.Name = "accuracy";
          field.Type = TType.Double;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Accuracy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as GeoData;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.latitude == other.__isset.latitude) && ((!__isset.latitude) || (System.Object.Equals(Latitude, other.Latitude))))
        && ((__isset.longitude == other.__isset.longitude) && ((!__isset.longitude) || (System.Object.Equals(Longitude, other.Longitude))))
        && ((__isset.time == other.__isset.time) && ((!__isset.time) || (System.Object.Equals(Time, other.Time))))
        && ((__isset.accuracy == other.__isset.accuracy) && ((!__isset.accuracy) || (System.Object.Equals(Accuracy, other.Accuracy))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.latitude)
          hashcode = (hashcode * 397) + Latitude.GetHashCode();
        if(__isset.longitude)
          hashcode = (hashcode * 397) + Longitude.GetHashCode();
        if(__isset.time)
          hashcode = (hashcode * 397) + Time.GetHashCode();
        if(__isset.accuracy)
          hashcode = (hashcode * 397) + Accuracy.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GeoData(");
      bool __first = true;
      if (__isset.latitude)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Latitude: ");
        sb.Append(Latitude);
      }
      if (__isset.longitude)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Longitude: ");
        sb.Append(Longitude);
      }
      if (__isset.time)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Time: ");
        sb.Append(Time);
      }
      if (__isset.accuracy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Accuracy: ");
        sb.Append(Accuracy);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
