/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace vdivsvirus.interfaces
{

  /// <summary>
  /// Structs of Symptome Input Data
  /// </summary>
  public partial class SymptomeInputData : TBase
  {
    private SymptomeType _type;
    private SymptomeStrength _strength;

    public SymptomeType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SymptomeStrength"/>
    /// </summary>
    public SymptomeStrength Strength
    {
      get
      {
        return _strength;
      }
      set
      {
        __isset.strength = true;
        this._strength = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type;
      public bool strength;
    }

    public SymptomeInputData()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Type = new SymptomeType();
                await Type.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Strength = (SymptomeStrength)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("SymptomeInputData");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Type != null && __isset.type)
        {
          field.Name = "type";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Type.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.strength)
        {
          field.Name = "strength";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Strength, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as SymptomeInputData;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.type == other.__isset.type) && ((!__isset.type) || (System.Object.Equals(Type, other.Type))))
        && ((__isset.strength == other.__isset.strength) && ((!__isset.strength) || (System.Object.Equals(Strength, other.Strength))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.type)
          hashcode = (hashcode * 397) + Type.GetHashCode();
        if(__isset.strength)
          hashcode = (hashcode * 397) + Strength.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("SymptomeInputData(");
      bool __first = true;
      if (Type != null && __isset.type)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Type: ");
        sb.Append(Type== null ? "<null>" : Type.ToString());
      }
      if (__isset.strength)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Strength: ");
        sb.Append(Strength);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
